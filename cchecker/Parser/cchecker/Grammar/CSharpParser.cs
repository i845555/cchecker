//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from cchecker/Grammar/CSharp.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace cchecker.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IDENTIFIER=42, INT_LITERAL=43, STRING_LITERAL=44, 
		WS=45, LINE_COMMENT=46, COMMENT=47;
	public const int
		RULE_prog = 0, RULE_compilation_unit = 1, RULE_using_directive = 2, RULE_namespace_member_declaration = 3, 
		RULE_namespace_declaration = 4, RULE_type_declaration = 5, RULE_class_declaration = 6, 
		RULE_class_body = 7, RULE_class_member_declaration = 8, RULE_method_declaration = 9, 
		RULE_parameter_list = 10, RULE_parameter = 11, RULE_field_declaration = 12, 
		RULE_variable_declarators = 13, RULE_variable_declarator = 14, RULE_type = 15, 
		RULE_predefined_type = 16, RULE_qualified_name = 17, RULE_block = 18, 
		RULE_statement = 19, RULE_variable_declaration = 20, RULE_expression_statement = 21, 
		RULE_return_statement = 22, RULE_expression = 23, RULE_assignment = 24, 
		RULE_conditional_expr = 25, RULE_logical_or_expr = 26, RULE_logical_and_expr = 27, 
		RULE_equality_expr = 28, RULE_relational_expr = 29, RULE_additive_expr = 30, 
		RULE_multiplicative_expr = 31, RULE_unary_expr = 32, RULE_primary = 33, 
		RULE_literal = 34;
	public static readonly string[] ruleNames = {
		"prog", "compilation_unit", "using_directive", "namespace_member_declaration", 
		"namespace_declaration", "type_declaration", "class_declaration", "class_body", 
		"class_member_declaration", "method_declaration", "parameter_list", "parameter", 
		"field_declaration", "variable_declarators", "variable_declarator", "type", 
		"predefined_type", "qualified_name", "block", "statement", "variable_declaration", 
		"expression_statement", "return_statement", "expression", "assignment", 
		"conditional_expr", "logical_or_expr", "logical_and_expr", "equality_expr", 
		"relational_expr", "additive_expr", "multiplicative_expr", "unary_expr", 
		"primary", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "';'", "'namespace'", "'{'", "'}'", "'public'", "'class'", 
		"'('", "')'", "','", "'='", "'void'", "'bool'", "'byte'", "'char'", "'short'", 
		"'int'", "'long'", "'float'", "'double'", "'decimal'", "'string'", "'.'", 
		"'return'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IDENTIFIER", "INT_LITERAL", "STRING_LITERAL", 
		"WS", "LINE_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compilation_unitContext compilation_unit() {
			return GetRuleContext<Compilation_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			compilation_unit();
			State = 71;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 73;
				using_directive();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 200L) != 0)) {
				{
				{
				State = 79;
				namespace_member_declaration();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_using_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__0);
			State = 86;
			qualified_name();
			State = 87;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_member_declaration);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				namespace_declaration();
				}
				break;
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__2);
			State = 94;
			qualified_name();
			State = 95;
			Match(T__3);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 200L) != 0)) {
				{
				{
				State = 96;
				namespace_member_declaration();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			class_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 106;
				Match(T__5);
				}
			}

			State = 109;
			Match(T__6);
			State = 110;
			Match(IDENTIFIER);
			State = 111;
			class_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__3);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398054895684L) != 0)) {
				{
				{
				State = 114;
				class_member_declaration();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_class_member_declaration);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				method_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				field_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 127;
				Match(T__5);
				}
			}

			State = 130;
			type();
			State = 131;
			Match(IDENTIFIER);
			State = 132;
			Match(T__7);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398054895616L) != 0)) {
				{
				State = 133;
				parameter_list();
				}
			}

			State = 136;
			Match(T__8);
			State = 137;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			parameter();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 140;
				Match(T__9);
				State = 141;
				parameter();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			type();
			State = 148;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 150;
				Match(T__5);
				}
			}

			State = 153;
			type();
			State = 154;
			variable_declarators();
			State = 155;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			variable_declarator();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 158;
				Match(T__9);
				State = 159;
				variable_declarator();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(IDENTIFIER);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 166;
				Match(T__10);
				State = 167;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_type);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				predefined_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				qualified_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8384512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpParser.IDENTIFIER, i);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 34, RULE_qualified_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(IDENTIFIER);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 178;
				Match(T__22);
				State = 179;
				Match(IDENTIFIER);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__3);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34935289147668L) != 0)) {
				{
				{
				State = 186;
				statement();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				variable_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				expression_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197;
				return_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 198;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			type();
			State = 202;
			variable_declarators();
			State = 203;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			expression();
			State = 206;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__23);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34935263985920L) != 0)) {
				{
				State = 209;
				expression();
				}
			}

			State = 212;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_exprContext conditional_expr() {
			return GetRuleContext<Conditional_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			conditional_expr();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 217;
				Match(T__10);
				State = 218;
				assignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_or_exprContext logical_or_expr() {
			return GetRuleContext<Logical_or_exprContext>(0);
		}
		public Conditional_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterConditional_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitConditional_expr(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_exprContext conditional_expr() {
		Conditional_exprContext _localctx = new Conditional_exprContext(Context, State);
		EnterRule(_localctx, 50, RULE_conditional_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			logical_or_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_or_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_exprContext[] logical_and_expr() {
			return GetRuleContexts<Logical_and_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_exprContext logical_and_expr(int i) {
			return GetRuleContext<Logical_and_exprContext>(i);
		}
		public Logical_or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterLogical_or_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitLogical_or_expr(this);
		}
	}

	[RuleVersion(0)]
	public Logical_or_exprContext logical_or_expr() {
		Logical_or_exprContext _localctx = new Logical_or_exprContext(Context, State);
		EnterRule(_localctx, 52, RULE_logical_or_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			logical_and_expr();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__24) {
				{
				{
				State = 224;
				Match(T__24);
				State = 225;
				logical_and_expr();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_and_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_exprContext[] equality_expr() {
			return GetRuleContexts<Equality_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_exprContext equality_expr(int i) {
			return GetRuleContext<Equality_exprContext>(i);
		}
		public Logical_and_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterLogical_and_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitLogical_and_expr(this);
		}
	}

	[RuleVersion(0)]
	public Logical_and_exprContext logical_and_expr() {
		Logical_and_exprContext _localctx = new Logical_and_exprContext(Context, State);
		EnterRule(_localctx, 54, RULE_logical_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			equality_expr();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 232;
				Match(T__25);
				State = 233;
				equality_expr();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_exprContext[] relational_expr() {
			return GetRuleContexts<Relational_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_exprContext relational_expr(int i) {
			return GetRuleContext<Relational_exprContext>(i);
		}
		public Equality_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterEquality_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitEquality_expr(this);
		}
	}

	[RuleVersion(0)]
	public Equality_exprContext equality_expr() {
		Equality_exprContext _localctx = new Equality_exprContext(Context, State);
		EnterRule(_localctx, 56, RULE_equality_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			relational_expr();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26 || _la==T__27) {
				{
				{
				State = 240;
				_la = TokenStream.LA(1);
				if ( !(_la==T__26 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 241;
				relational_expr();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_exprContext[] additive_expr() {
			return GetRuleContexts<Additive_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_exprContext additive_expr(int i) {
			return GetRuleContext<Additive_exprContext>(i);
		}
		public Relational_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterRelational_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitRelational_expr(this);
		}
	}

	[RuleVersion(0)]
	public Relational_exprContext relational_expr() {
		Relational_exprContext _localctx = new Relational_exprContext(Context, State);
		EnterRule(_localctx, 58, RULE_relational_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			additive_expr();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) {
				{
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249;
				additive_expr();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_exprContext[] multiplicative_expr() {
			return GetRuleContexts<Multiplicative_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_exprContext multiplicative_expr(int i) {
			return GetRuleContext<Multiplicative_exprContext>(i);
		}
		public Additive_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterAdditive_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitAdditive_expr(this);
		}
	}

	[RuleVersion(0)]
	public Additive_exprContext additive_expr() {
		Additive_exprContext _localctx = new Additive_exprContext(Context, State);
		EnterRule(_localctx, 60, RULE_additive_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			multiplicative_expr();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__32 || _la==T__33) {
				{
				{
				State = 256;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 257;
				multiplicative_expr();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		public Multiplicative_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expr(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_exprContext multiplicative_expr() {
		Multiplicative_exprContext _localctx = new Multiplicative_exprContext(Context, State);
		EnterRule(_localctx, 62, RULE_multiplicative_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			unary_expr();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) {
				{
				{
				State = 264;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 265;
				unary_expr();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 64, RULE_unary_expr);
		int _la;
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__38:
			case T__39:
			case T__40:
			case IDENTIFIER:
			case INT_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				primary();
				}
				break;
			case T__32:
			case T__33:
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 300647710720L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 273;
				unary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 66, RULE_primary);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				Match(T__7);
				State = 280;
				expression();
				State = 281;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(CSharpParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CSharpParser.STRING_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpListener typedListener = listener as ICSharpListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30236569763840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,288,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,1,
		0,1,1,5,1,75,8,1,10,1,12,1,78,9,1,1,1,5,1,81,8,1,10,1,12,1,84,9,1,1,2,
		1,2,1,2,1,2,1,3,1,3,3,3,92,8,3,1,4,1,4,1,4,1,4,5,4,98,8,4,10,4,12,4,101,
		9,4,1,4,1,4,1,5,1,5,1,6,3,6,108,8,6,1,6,1,6,1,6,1,6,1,7,1,7,5,7,116,8,
		7,10,7,12,7,119,9,7,1,7,1,7,1,8,1,8,1,8,3,8,126,8,8,1,9,3,9,129,8,9,1,
		9,1,9,1,9,1,9,3,9,135,8,9,1,9,1,9,1,9,1,10,1,10,1,10,5,10,143,8,10,10,
		10,12,10,146,9,10,1,11,1,11,1,11,1,12,3,12,152,8,12,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,5,13,161,8,13,10,13,12,13,164,9,13,1,14,1,14,1,14,3,14,
		169,8,14,1,15,1,15,1,15,3,15,174,8,15,1,16,1,16,1,17,1,17,1,17,5,17,181,
		8,17,10,17,12,17,184,9,17,1,18,1,18,5,18,188,8,18,10,18,12,18,191,9,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,200,8,19,1,20,1,20,1,20,1,20,1,
		21,1,21,1,21,1,22,1,22,3,22,211,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
		3,24,220,8,24,1,25,1,25,1,26,1,26,1,26,5,26,227,8,26,10,26,12,26,230,9,
		26,1,27,1,27,1,27,5,27,235,8,27,10,27,12,27,238,9,27,1,28,1,28,1,28,5,
		28,243,8,28,10,28,12,28,246,9,28,1,29,1,29,1,29,5,29,251,8,29,10,29,12,
		29,254,9,29,1,30,1,30,1,30,5,30,259,8,30,10,30,12,30,262,9,30,1,31,1,31,
		1,31,5,31,267,8,31,10,31,12,31,270,9,31,1,32,1,32,1,32,3,32,275,8,32,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,284,8,33,1,34,1,34,1,34,0,0,35,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,0,7,1,0,12,22,1,0,27,28,1,0,29,32,1,0,33,34,
		1,0,35,37,2,0,33,34,38,38,2,0,39,41,43,44,286,0,70,1,0,0,0,2,76,1,0,0,
		0,4,85,1,0,0,0,6,91,1,0,0,0,8,93,1,0,0,0,10,104,1,0,0,0,12,107,1,0,0,0,
		14,113,1,0,0,0,16,125,1,0,0,0,18,128,1,0,0,0,20,139,1,0,0,0,22,147,1,0,
		0,0,24,151,1,0,0,0,26,157,1,0,0,0,28,165,1,0,0,0,30,173,1,0,0,0,32,175,
		1,0,0,0,34,177,1,0,0,0,36,185,1,0,0,0,38,199,1,0,0,0,40,201,1,0,0,0,42,
		205,1,0,0,0,44,208,1,0,0,0,46,214,1,0,0,0,48,216,1,0,0,0,50,221,1,0,0,
		0,52,223,1,0,0,0,54,231,1,0,0,0,56,239,1,0,0,0,58,247,1,0,0,0,60,255,1,
		0,0,0,62,263,1,0,0,0,64,274,1,0,0,0,66,283,1,0,0,0,68,285,1,0,0,0,70,71,
		3,2,1,0,71,72,5,0,0,1,72,1,1,0,0,0,73,75,3,4,2,0,74,73,1,0,0,0,75,78,1,
		0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,82,1,0,0,0,78,76,1,0,0,0,79,81,3,
		6,3,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,3,1,0,
		0,0,84,82,1,0,0,0,85,86,5,1,0,0,86,87,3,34,17,0,87,88,5,2,0,0,88,5,1,0,
		0,0,89,92,3,8,4,0,90,92,3,10,5,0,91,89,1,0,0,0,91,90,1,0,0,0,92,7,1,0,
		0,0,93,94,5,3,0,0,94,95,3,34,17,0,95,99,5,4,0,0,96,98,3,6,3,0,97,96,1,
		0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,
		99,1,0,0,0,102,103,5,5,0,0,103,9,1,0,0,0,104,105,3,12,6,0,105,11,1,0,0,
		0,106,108,5,6,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,
		110,5,7,0,0,110,111,5,42,0,0,111,112,3,14,7,0,112,13,1,0,0,0,113,117,5,
		4,0,0,114,116,3,16,8,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,
		117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,5,0,0,121,15,
		1,0,0,0,122,126,3,18,9,0,123,126,3,24,12,0,124,126,5,2,0,0,125,122,1,0,
		0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,17,1,0,0,0,127,129,5,6,0,0,128,
		127,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,3,30,15,0,131,132,
		5,42,0,0,132,134,5,8,0,0,133,135,3,20,10,0,134,133,1,0,0,0,134,135,1,0,
		0,0,135,136,1,0,0,0,136,137,5,9,0,0,137,138,3,36,18,0,138,19,1,0,0,0,139,
		144,3,22,11,0,140,141,5,10,0,0,141,143,3,22,11,0,142,140,1,0,0,0,143,146,
		1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,21,1,0,0,0,146,144,1,0,0,0,
		147,148,3,30,15,0,148,149,5,42,0,0,149,23,1,0,0,0,150,152,5,6,0,0,151,
		150,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,3,30,15,0,154,155,
		3,26,13,0,155,156,5,2,0,0,156,25,1,0,0,0,157,162,3,28,14,0,158,159,5,10,
		0,0,159,161,3,28,14,0,160,158,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,
		162,163,1,0,0,0,163,27,1,0,0,0,164,162,1,0,0,0,165,168,5,42,0,0,166,167,
		5,11,0,0,167,169,3,46,23,0,168,166,1,0,0,0,168,169,1,0,0,0,169,29,1,0,
		0,0,170,174,3,32,16,0,171,174,3,34,17,0,172,174,5,42,0,0,173,170,1,0,0,
		0,173,171,1,0,0,0,173,172,1,0,0,0,174,31,1,0,0,0,175,176,7,0,0,0,176,33,
		1,0,0,0,177,182,5,42,0,0,178,179,5,23,0,0,179,181,5,42,0,0,180,178,1,0,
		0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,35,1,0,0,0,184,
		182,1,0,0,0,185,189,5,4,0,0,186,188,3,38,19,0,187,186,1,0,0,0,188,191,
		1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,
		0,192,193,5,5,0,0,193,37,1,0,0,0,194,200,3,36,18,0,195,200,3,40,20,0,196,
		200,3,42,21,0,197,200,3,44,22,0,198,200,5,2,0,0,199,194,1,0,0,0,199,195,
		1,0,0,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,39,1,0,0,0,
		201,202,3,30,15,0,202,203,3,26,13,0,203,204,5,2,0,0,204,41,1,0,0,0,205,
		206,3,46,23,0,206,207,5,2,0,0,207,43,1,0,0,0,208,210,5,24,0,0,209,211,
		3,46,23,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,2,
		0,0,213,45,1,0,0,0,214,215,3,48,24,0,215,47,1,0,0,0,216,219,3,50,25,0,
		217,218,5,11,0,0,218,220,3,48,24,0,219,217,1,0,0,0,219,220,1,0,0,0,220,
		49,1,0,0,0,221,222,3,52,26,0,222,51,1,0,0,0,223,228,3,54,27,0,224,225,
		5,25,0,0,225,227,3,54,27,0,226,224,1,0,0,0,227,230,1,0,0,0,228,226,1,0,
		0,0,228,229,1,0,0,0,229,53,1,0,0,0,230,228,1,0,0,0,231,236,3,56,28,0,232,
		233,5,26,0,0,233,235,3,56,28,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,
		1,0,0,0,236,237,1,0,0,0,237,55,1,0,0,0,238,236,1,0,0,0,239,244,3,58,29,
		0,240,241,7,1,0,0,241,243,3,58,29,0,242,240,1,0,0,0,243,246,1,0,0,0,244,
		242,1,0,0,0,244,245,1,0,0,0,245,57,1,0,0,0,246,244,1,0,0,0,247,252,3,60,
		30,0,248,249,7,2,0,0,249,251,3,60,30,0,250,248,1,0,0,0,251,254,1,0,0,0,
		252,250,1,0,0,0,252,253,1,0,0,0,253,59,1,0,0,0,254,252,1,0,0,0,255,260,
		3,62,31,0,256,257,7,3,0,0,257,259,3,62,31,0,258,256,1,0,0,0,259,262,1,
		0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,61,1,0,0,0,262,260,1,0,0,0,263,
		268,3,64,32,0,264,265,7,4,0,0,265,267,3,64,32,0,266,264,1,0,0,0,267,270,
		1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,63,1,0,0,0,270,268,1,0,0,0,
		271,275,3,66,33,0,272,273,7,5,0,0,273,275,3,64,32,0,274,271,1,0,0,0,274,
		272,1,0,0,0,275,65,1,0,0,0,276,284,3,68,34,0,277,284,5,42,0,0,278,284,
		3,34,17,0,279,280,5,8,0,0,280,281,3,46,23,0,281,282,5,9,0,0,282,284,1,
		0,0,0,283,276,1,0,0,0,283,277,1,0,0,0,283,278,1,0,0,0,283,279,1,0,0,0,
		284,67,1,0,0,0,285,286,7,6,0,0,286,69,1,0,0,0,27,76,82,91,99,107,117,125,
		128,134,144,151,162,168,173,182,189,199,210,219,228,236,244,252,260,268,
		274,283
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace cchecker.Parser
